int mm = 100;
	List list;
	if (InitQueue(&list, 1000, 0))
	{
		printf("%d %d \n", GetCurQueueLen(&list), GetMaxQueueLen(&list));

		int nCount = 0;
		for (int i = 1; i <= 1021; i++)
		{
			if (!Insert(&list, &mm, 0))
			{
				nCount++;
			}
		}

		printf("-----------%d %d\n", nCount, Full(&list));

		if (!DeleteForNode(&list, GetHead(&list)))
		{
			printf("error-2\n");
		}

		if (!DeleteForNode(&list, GetHead(&list)))
		{
			printf("error-2\n");
		}

		if (!DeleteForIndex(&list, 1))
		{
			printf("error-2\n");
		}

		if (!DeleteForIndex(&list, 0))
		{
			printf("error-2\n");
		}

		if (!DeleteForIndex(&list, 30))
		{
			printf("error-2\n");
		}

		if (!DeleteForIndex(&list, 1015))
		{
			printf("error-2\n");
		}

		printf("-----------%d\n", Full(&list));

		BeginTraveData(&list);
			printf("%d ", *((int *)pData));
		EndTraveData();

		nCount = 0;
		for (int i = 0; i < 998; i++)
		{
			if (!DeleteForIndex(&list, i))
			{
				nCount++;
			}
		}

		printf("---------%d\n", nCount);

		printf("%d %d %d\n", GetCurQueueLen(&list), GetMaxQueueLen(&list), Full(&list));

		printf("------------\n");
		BeginTraveData(&list);
			printf("%d ", *((int *)pData));
		EndTraveData();
		printf("------------\n");

		if (ReleaseQueue(&list))
		{
			printf("ok\n");
		}
	}
	
	
	#include "thread/thread.h"

int nCountNN = 0;
void *Test(void *pData)
{
	nCountNN++;

	int nnn = 1;
	while (nnn++ <= 100000000);

//	printf("1234---%d\n", *((int *)pData));
//	printf("3456\n");
	return NULL;
}

int main(int argc, char *argv[])
{
	Thread *pThread1[100] = {0};
	int nArray1[100] = {0};
	for (int i = 1; i <= 100; i++)
	{
		nArray1[i - 1] = i;
		pThread1[i -1] = CreateSingleThread(Test, &nArray1[i - 1]);
	}

	Thread *pThread2[30] = {0};
	int nArray[30] = {0};
	for (int i = 1; i <= 30; i++)
	{
		nArray[i - 1] = i;
		pThread2[i -1] = CreateLoopThread(Test, &nArray[i - 1], 0);
	}

	int k = 0;
	while (k++ <= 1)
	{
		for (int i = 1; i <= 100; i++)
		{
			ResumeThread(pThread1[i - 1]);
		}
	}

	sleep(5);

	printf("-------%d\n", nCountNN);

	for (int i = 1; i <= 100; i++)
	{
		printf("release\n");
		ReleaseThread(pThread1[i-1]);
		if (i <= 30)
		{
			ReleaseThread(pThread2[i-1]);
		}
	}

	return 0;
}

int nCount = 0;
void *Test(void *pData)
{
	printf("%d\n", *((int *)pData));
	nCount++;
	sleep(2);
	return NULL;
}

int main(int argc, char *argv[])
{
	int nTask = 11;
	ThreadPool threadPool;
	if (CreateThreadPool(&threadPool, &nTask))
	{
		printf("ok-1\n");
		int data = 1;
		int mm = 1;
		while (mm++ <= 10)
		{
			for (int i = 1; i <= GetCurQueueLen(&threadPool.threadList); i++)
			{
				ExecuteTask(&threadPool, Test, &data);
			}

			sleep(3);
		}

		printf("%d\n", nCount);
		printf("%d\n", GetCurQueueLen(&threadPool.threadList));

		printf("release\n");
		if (ReleaseThreadPool(&threadPool))
		{
			printf("ok-2\n");
		}
	}
	return 0;
}

#include "config/config.h"

int main(int argc, char *argv[])
{
	printf("-----------\n");
	Ini ini;
	printf("-----------\n");
	if (InitIni(&ini, "./file/resource/副本.ini", 500))
	{
		printf("-----------\n");
		char *pValue1 = GetString(&ini, "COMMUNICATION", "DJ_IP", "0");
		printf("%s\n", pValue1);
		free(pValue1);
		pValue1 = NULL;

		int nValue = GetInt(&ini, "SHUNTINGTRACE", "CD_PORT_1", 2);
		printf("%d\n", nValue);

		nValue = GetInt(&ini, "SHUNTINGTRACE", "ISTRACE", 2);
		printf("%d\n", nValue);

		pValue1 = GetString(&ini, "刘撼翀", "性别", "女");
		printf("%s\n", pValue1);
		free(pValue1);
		pValue1 = NULL;

		double dValue = GetDouble(&ini, "刘撼", "钱", 1.1);
		printf("%f\n", dValue);

		dValue = GetDouble(&ini, "刘撼翀", "钱", 1.1);
		printf("%f\n", dValue);

		if (ReleaseIni(&ini))
		{
			printf("ok\n");
		}
	}
	return 0;
}

#include "config/configmanage.h"
#include "log/log.h"

int main(int argc, char *argv[])
{
	printf("--------\n");
	if (!InitServerConfig(500))
	{
		printf("初始化配置文件错误\n");
		return 0;
	}

	if (!InitLog())
	{
		printf("初始化日志错误\n");
	}

	for (int i = 0; i < 100000; i++)
	{
		if (i % 2 == 0)
		{
			ErrorInfor("main", "释放日志错误 初始化日志错误");
		}
		else if (i % 3 == 0)
		{
			SystemErrorInfor("main", errno);
		}
		else if (i % 5 == 0)
		{
			DebugInfor("debug main");
		}
		else
		{
			LogInfor("log main");
		}
	}

	printf("exit\n");

	sleep(30);
	printf("----------\n");

	if (!ReleaseLog())
	{
		printf("释放日志错误\n");
	}

	if (!ReleaseServerConfig())
	{
		printf("释放配置文件错误\n");
		return 0;
	}

	printf("123\n");

	return 0;
}